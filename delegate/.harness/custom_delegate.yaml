pipeline:
  name: delegate
  identifier: delegate
  projectIdentifier: Default_Project_1662659562703
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.global
        repoName: harness-community/custom-delegate
        build: <+input>
  stages:
    - stage:
        name: build
        identifier: test
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: Plugin
                  name: latest
                  identifier: latest
                  spec:
                    connectorRef: account.dockerhub
                    image: rssnyder/drone-plugin-latest-delegate
                    settings:
                      HARNESS_PLATFORM_API_KEY: <+secrets.getValue("account.api")>
              - step:
                  type: BuildAndPushDockerRegistry
                  name: test
                  identifier: test
                  spec:
                    connectorRef: account.dockerhub
                    repo: rssnyder/delegate
                    tags:
                      - <+pipeline.variables.test_tag>
                    dockerfile: Dockerfile.tools
                    buildArgs:
                      SOURCE_TAG: <+steps.latest.output.outputVariables.latestSupportedVersion>
                    resources:
                      limits:
                        memory: 2G
                        cpu: "2"
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
    - stage:
        name: deploy
        identifier: deploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: delegate
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources: <+input>
          environment:
            environmentRef: dev
            deployToAll: false
            infrastructureDefinitions:
              - identifier: sa
          execution:
            steps:
              - step:
                  name: create
                  identifier: create
                  template:
                    templateRef: account.create_namespace
                    versionLabel: "1"
              - step:
                  type: K8sRollingDeploy
                  name: Rollout
                  identifier: Rollout
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
                  timeout: 10m
              - step:
                  type: Wait
                  name: wait for delegate
                  identifier: wait_for_delegate
                  spec:
                    duration: 5m
              - step:
                  type: ShellScript
                  name: command on delegate
                  identifier: command_on_delegate
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          [[ "$ACCOUNT_ID" == <+account.identifier>​​ ]]
                          echo $PATH
                          [[ "$(whoami)" == "harness​​" ]]
                          aws help && gcloud --help && kubectl --help && terraform --help && terragrunt --help && serverless --help
                    environmentVariables: []
                    outputVariables: []
                    delegateSelectors:
                      - <+serviceVariables.delegate_name>
                  timeout: 10m
                  failureStrategies: []
              - step:
                  name: remove
                  identifier: remove
                  template:
                    templateRef: account.delete_namespace
                    versionLabel: "1"
            rollbackSteps:
              - step:
                  name: delete
                  identifier: delete
                  template:
                    templateRef: account.delete_namespace
                    versionLabel: "1"
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
    - stage:
        name: publish
        identifier: build
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - parallel:
                  - step:
                      type: Background
                      name: dind
                      identifier: dind
                      spec:
                        connectorRef: account.dockerhub
                        image: docker:dind
                        shell: Sh
                  - step:
                      type: Run
                      name: check
                      identifier: check
                      spec:
                        connectorRef: account.dockerhub
                        image: docker:latest
                        shell: Sh
                        command: docker ps
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Retry
                              spec:
                                retryCount: 10
                                retryIntervals:
                                  - 5s
                                onRetryFailure:
                                  action:
                                    type: MarkAsFailure
              - step:
                  type: Run
                  name: publish
                  identifier: publish
                  spec:
                    connectorRef: account.dockerhub
                    image: docker
                    shell: Sh
                    command: |-
                      docker login -u rssnyder -p '<+secrets.getValue("account.dockerhub")>'
                      docker pull rssnyder/delegate:<+pipeline.variables.test_tag>
                      docker tag rssnyder/delegate:<+pipeline.variables.test_tag> rssnyder/delegate:latest
                      docker tag rssnyder/delegate:<+pipeline.variables.test_tag> rssnyder/delegate:<+pipeline.stages.test.spec.execution.steps.latest.output.outputVariables.latestSupportedVersion>
                      docker push rssnyder/delegate:latest
                      docker push rssnyder/delegate:<+pipeline.stages.test.spec.execution.steps.latest.output.outputVariables.latestSupportedVersion>
              - step:
                  type: Plugin
                  name: set latest
                  identifier: set_latest
                  spec:
                    connectorRef: account.dockerhub
                    image: rssnyder/drone-plugin-latest-delegate
                    settings:
                      DELEGATE_TAG: rssnyder/delegate:<+pipeline.stages.test.spec.execution.steps.get_latest_tag.output.outputVariables.LATEST>
                      HARNESS_PLATFORM_API_KEY: <+secrets.getValue("account.api")>
          sharedPaths:
            - /var/run
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
        when:
          pipelineStatus: Success
          condition: <+codebase.branch> == "main"
  variables:
    - name: base_image
      type: String
      description: ""
      value: harness/delegate
    - name: test_tag
      type: String
      description: ""
      value: dev
  delegateSelectors:
    - sa-cluster
